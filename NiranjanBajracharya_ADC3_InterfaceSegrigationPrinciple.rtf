{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red252\green252\blue251;
\red109\green0\blue117;\red0\green0\blue0;\red20\green0\blue255;\red136\green136\blue135;\red16\green120\blue67;
\red252\green252\blue251;\red109\green0\blue117;\red19\green0\blue254;\red135\green135\blue135;\red16\green120\blue67;
\red151\green65\blue3;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c0\c1\c1;\cssrgb\c99150\c99149\c98778;
\cssrgb\c50968\c4307\c53447;\cssrgb\c0\c0\c0;\cssrgb\c11391\c11604\c100000;\cssrgb\c60198\c60197\c59972;\cssrgb\c0\c53343\c33268;
\cssrgb\c99042\c99041\c98794;\cssrgb\c50772\c4109\c53254;\cssrgb\c10885\c11028\c99890;\cssrgb\c60132\c60132\c59982;\cssrgb\c0\c53340\c33290;
\cssrgb\c66332\c32891\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf2 SOLID principle\
interface segregation principle\
in this segment of SOLID principle Robert C. Martin defines as \'93clients should not be forced to depend upon interface that they do not use. The goal of the Interface Segregation Principle is to reduce the side effects and frequency of required change by splitting the software into multiple independent parts. this principle is only achievable if you define your interface so that they  fit a specific client or task\
example\
in this example we apply interface segregation principle and separate the single smart device interface into three smaller interface: Printer, Fax and Scanner\
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \expnd0\expndtw0\kerning0
interface\cf3 \cb4  \cf3 \cb4 Printer\cf3 \cb4 \{\cf3 \cb1 \
\cf3 \cb4     \cf3 \cb4 void\cf3 \cb4  Print();\cf3 \cb1 \
\cf3 \cb4 \}\cf3 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 interface\cf3 \cb4  \cf3 \cb4 Fax\cf3 \cb4 \{\cf3 \cb1 \
\cf3 \cb4     \cf3 \cb4 void\cf3 \cb4  Fax();\cf3 \cb1 \
\cf3 \cb4 \}\cf3 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 interface\cf3 \cb4  \cf3 \cb4 Scanner\cf3 \cb4 \{\cf3 \cb1 \
\cf3 \cb4     \cf3 \cb4 void\cf3 \cb4  Scan();\cf3 \cb1 \
it is easier to implement classes that do not need to handle all the original functionalities of the smart device, interface like economic printer.this code is more decoupled and easier to maintain.lets re implement economic printer with this architecture:\
\
\cf3 \cb10 class\cf3 \cb10  \cf3 \cb10 EconomicPrinter\cf3 \cb10  : Printer\cf3 \cb1 \
\cf3 \cb10 \{\cf3 \cb1 \
\cf3 \cb10     \cf3 \cb10 public\cf3 \cb10  \cf3 \cb10 void\cf3 \cb10  Print()\cf3 \cb1 \
\cf3 \cb10     \{\cf3 \cb1 \
\cf3 \cb10          \cf3 \cb10 // Printing\cf3 \cb1 \
\cf3 \cb10     \}\cf3 \cb1 \
\cf3 \cb10 \}\
now the final all in one printer looks like:\
\
\cf3 \cb10 class\cf3 \cb10  \cf3 \cb10 AllInOnePrinter\cf3 \cb10  : Printer, Fax, Scanner\cf3 \cb1 \
\cf3 \cb10 \{\cf3 \cb1 \
\cf3 \cb10     \cf3 \cb10 public\cf3 \cb10  \cf3 \cb10 void\cf3 \cb10  Print()\cf3 \cb1 \
\cf3 \cb10     \{\cf3 \cb1 \
\cf3 \cb10          \cf3 \cb10 // Printing text and image\cf3 \cb1 \
\cf3 \cb10     \}\cf3 \cb1 \
\cf3 \cb10     \cf3 \cb10 public\cf3 \cb10  \cf3 \cb10 void\cf3 \cb10  Fax()\cf3 \cb1 \
\cf3 \cb10     \{\cf3 \cb1 \
\cf3 \cb10          \cf3 \cb10 // receiving fax\cf3 \cb1 \
\cf3 \cb10     \}\cf3 \cb1 \
\cf3 \cb10     \cf3 \cb10 public\cf3 \cb10  \cf3 \cb10 void\cf3 \cb10  Scan()\cf3 \cb1 \
\cf3 \cb10     \{\cf3 \cb1 \
\cf3 \cb10          \cf3 \cb10 // Scanning image.\cf3 \cb1 \
\cf3 \cb10     \}\cf3 \cb1 \
\cf3 \cb10 \}}